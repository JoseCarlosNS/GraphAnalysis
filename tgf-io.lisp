(load "graph.lisp")
(load "utils.lisp")

(defun load-tgf (file-name &optional &key (g-type 1) (nodes-first t) (weighted nil) (separator " "))
    (let ((in nil) (graph nil) (nodes nil) (edges nil) (current-list nil) (num-nodes 0) (num-edges 0))
        (setf in (open file-name :if-does-not-exist nil))
        (setf graph (make-instance 'graph))
        (setf (gethash "type" (properties graph)) g-type)
        (setf (gethash "weighted" (properties graph)) weighted)
        (setf current-list 1)
        (when in
            (loop for line = (read-line in nil)
                while line do 
                    (progn
                        (let ((e nil))  
                            (when (not (string= (char line 0) "#"))
                                (setf e (split-str line separator))
                                (if nodes-first      
                                    (progn
                                        (when (> (list-length e) 1)
                                            (setf current-list 2))
                                        (if (= current-list 1)
                                            (progn
                                                (incf num-nodes)
                                                (let ((node nil))
                                                    (setf node (parse-integer (car e)))
                                                    (push node nodes)
                                                    (if (null (gethash node (nodes graph)))
                                                        (setf (gethash node (nodes graph)) (make-hash-table :test #'equal)))))
                                            (let ((weight nil) (node1 nil) (node2 nil) (edge nil))
                                                (incf num-edges)
                                                (setf edge (mapcar #'parseinteger e))
                                                (loop for element in edge and i from 0 do
                                                    (case i
                                                        (0 (setf node1 element))
                                                        (1 (setf node2 element))
                                                        (3 (setf weight element))))
                                                (setf edge (list node1 node2))
                                                (when (null (gethash edge (edges graph)))
                                                    (setf (gethash edge (edges graph)) (make-hash-table :test #'equal)))
                                                (when weighted
                                                    (setf (gethash "weight" (gethash edge (edges graph))) weight))
                                                (push edge (gethash "edges" (gethash node1 (nodes graph))))
                                                (when (= 2 (gethash "type" (properties graph)))
                                                    (push edge (gethash "edges" (gethash node2 (nodes graph))))))))
                                    (let ((edge nil))
                                        (setf edge (mapcar #'parse-integer e))
                                        (pushnew (first edge) nodes)
                                        (pushnew (second edge) nodes)
                                        (push edge edges)))))))
            (close in))
        (setf (nodes graph) nodes)
        (setf (edges graph) edges)
        (setf (g-type graph) g-type)
        graph))

(defun save-tgf (file-name g &optional &key (nodes-first t))
    (let ((data nil) (file nil))
        (dolist (e (edges g))
            (push e data))
        (when nodes-first
            (progn
                (push "#" data)
                (dolist (n (nodes g))
                    (push n data))))
        (setf file (open file-name :direction :output :if-exists :supersede))
        (dolist (d data)
            (if (listp d)
                (progn
                    (format file "~a ~a" (first d) (second d))
                    (when (weighted g)
                        (format file " ~a" (third d)))
                    (format file "~%"))
                (format file "~a~%" d)))
        (close file)))
